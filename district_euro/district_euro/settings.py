"""
Django settings for district_euro project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import datetime
import os
import sys

from django.conf import settings as django_settings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'XXXXXXXXX'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'rest_framework',
    'rest_framework_swagger',
    'corsheaders',
    'djmoney',
    'core',
    'landing'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'district_euro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'district_euro.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

IS_TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'

AWS_ENVIRONMENT = os.environ.get('AWS_ENVIRONMENT')
IS_DEMO = AWS_ENVIRONMENT == 'DEMO'

if AWS_ENVIRONMENT:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'database_name', # The name you set when creating the database
            'USER': 'database_user',
            'PASSWORD': 'database_password',
            'HOST': 'database_host', # localhost most likely
        }
    }
    if IS_DEMO:
        DATABASES['default']['NAME'] = 'district_euro_demo'
    DEBUG = False
    ALLOWED_HOSTS = (
        'apitest.districteuro.com',
        'apidemo.districteuro.com',
    )
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'database_name', # The name you set when creating the database
            'USER': 'database_user',
            'PASSWORD': 'database_password',
            'HOST': 'database_host', # localhost most likely
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'core.User'

# If autoactivate users when creating them
USERS_AUTO_ACTIVATE = True

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# django-rest-framework settings
REST_FRAMEWORK = {
    'UNICODE_JSON': False,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'PAGE_SIZE': 20,
    'EXCEPTION_HANDLER': 'core.exception_handler.core_exception_handler',
    'DEFAULT_THROTTLE_RATES': {
        'anon': '60/minute',
        'user': '1000/minute'
    }
}

# django-rest-framework-jwt settings

AUTH_TOKEN_PREFIX = 'Token'

JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
        'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
        'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'core.rest.auth.utils.jwt_response_payload_handler',

    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),

    'JWT_AUTH_HEADER_PREFIX': AUTH_TOKEN_PREFIX,
}

# SWAGGER settings
SWAGGER_SETTINGS = {
    'token_type': AUTH_TOKEN_PREFIX,
}

# cors-headers settings
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()
CORS_ORIGIN_REGEX_WHITELIST = ('*.districteuro.com',)
CORS_URLS_REGEX = '^.*$'
CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
)
CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken'
)
CORS_EXPOSE_HEADERS = ()

# django-money config (for money fields)
CURRENCIES = (
    'CNY',  # China (Yuan Renminbi)
)

# s3 settings
S3_STORAGE = True
S3_BUCKET_NAME = 'districteuro-images-demo' if IS_DEMO else 'districteuro-images-test'
S3_ACCES_KEY = 'XXXXXXXXX'
S3_SECRET_KEY = 'XXXXXXXXX'

# Configure django logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s || %(levelname)s || %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'db': {
            'level': 'DEBUG',
            'class': 'core.logger.DistrictEuroLoggingHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'core': {
            'handlers': ['db'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
    },
}

# i18n

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'core', 'locale'),
]

_LANGUAGE_CODE_LIST = ['en', 'es', 'zh-hans']

LANGUAGES = filter(lambda x: x[0] in _LANGUAGE_CODE_LIST, list(django_settings.LANGUAGES))

# LANGUAGES = [
#     ('en', gettext_noop('English')),
#     ('es', gettext_noop('Spanish')),
#     ('zh-tw', gettext_noop('Chinese - Taiwan')),
# ]



# django-modeltranslations settings
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'
